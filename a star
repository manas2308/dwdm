import heapq

def a_star_search(start, goal, heuristic, neighbors):
    open_list = []
    heapq.heappush(open_list, (heuristic[start], start))
    
    came_from = {}
    cost_so_far = {}
    came_from[start] = None
    cost_so_far[start] = 0

    while open_list:
        _, current = heapq.heappop(open_list)
        
        if current == goal:
            break
        
        for neighbor in neighbors(current):
            new_cost = cost_so_far[current] + 1  # Assume cost between nodes is 1
            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_cost
                priority = new_cost + heuristic[neighbor]
                heapq.heappush(open_list, (priority, neighbor))
                came_from[neighbor] = current

    return reconstruct_path(came_from, start, goal)

def reconstruct_path(came_from, start, goal):
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = came_from[current]
    path.append(start)
    path.reverse()
    return path

# Example usage
if __name__ == "__main__":
    # Example grid with heuristic values (Manhattan distance in this case)
    heuristic = {
        (0, 0): 4, (0, 1): 3, (0, 2): 2, (0, 3): 1, (0, 4): 0,
        (1, 0): 3, (1, 1): 2, (1, 2): 1, (1, 3): 0, (1, 4): 1,
        (2, 0): 2, (2, 1): 1, (2, 2): 0, (2, 3): 1, (2, 4): 2,
        (3, 0): 1, (3, 1): 0, (3, 2): 1, (3, 3): 2, (3, 4): 3,
        (4, 0): 0, (4, 1): 1, (4, 2): 2, (4, 3): 3, (4, 4): 4,
    }
    
    def neighbors(node):
        x, y = node
        results = []
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 5 and 0 <= ny < 5:  # Bound check for grid
                results.append((nx, ny))
        return results

    start = (0, 0)
    goal = (4, 4)
    
    path = a_star_search(start, goal, heuristic, neighbors)
    print("Path:", path)
